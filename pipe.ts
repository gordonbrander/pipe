/**
 * Applies functions over value from left to right.
 * @param value - The initial value to pipe
 * @param fns - The functions to pipe the value through
 * @returns The final value after all functions have been applied
 */
export function pipe<A>(value: A): A;
export function pipe<A, B>(value: A, a: (input: A) => B): B;
export function pipe<A, B, C>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
): C;
export function pipe<A, B, C, D>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
): D;
export function pipe<A, B, C, D, E>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
): E;
export function pipe<A, B, C, D, E, F>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
): F;
export function pipe<A, B, C, D, E, F, G>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
): G;
export function pipe<A, B, C, D, E, F, G, H>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
): H;
export function pipe<A, B, C, D, E, F, G, H, I>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
): I;
export function pipe<A, B, C, D, E, F, G, H, I, J>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
): J;
export function pipe<A, B, C, D, E, F, G, H, I, J, K>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
): K;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
): L;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
): M;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
): N;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
): O;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
): P;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
): Q;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
): R;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
  r: (input: R) => S,
): S;
export function pipe<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
  r: (input: R) => S,
  s: (input: S) => T,
): T;
export function pipe<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
>(
  value: A,
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
  r: (input: R) => S,
  s: (input: S) => T,
  t: (input: T) => U,
): U;
export function pipe(
  value: unknown,
  ...fns: Array<(input: unknown) => unknown>
): unknown;
export function pipe(
  value: unknown,
  ...fns: Array<(input: unknown) => unknown>
): unknown {
  for (const fn of fns) {
    value = fn(value);
  }
  return value;
}

/**
 * Composes functions from left to right
 * @param fns - The functions to compose
 * @returns A function that applies the composed functions in order
 */
export function flow<A>(a: (input: A) => A): (input: A) => A;
export function flow<A, B>(a: (input: A) => B): (input: A) => B;
export function flow<A, B, C>(
  a: (input: A) => B,
  b: (input: B) => C,
): (input: A) => C;
export function flow<A, B, C, D>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
): (input: A) => D;
export function flow<A, B, C, D, E>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
): (input: A) => E;
export function flow<A, B, C, D, E, F>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
): (input: A) => F;
export function flow<A, B, C, D, E, F, G>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
): (input: A) => G;
export function flow<A, B, C, D, E, F, G, H>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
): (input: A) => H;
export function flow<A, B, C, D, E, F, G, H, I>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
): (input: A) => I;
export function flow<A, B, C, D, E, F, G, H, I, J>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
): (input: A) => J;
export function flow<A, B, C, D, E, F, G, H, I, J, K>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
): (input: A) => K;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
): (input: A) => L;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
): (input: A) => M;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
): (input: A) => N;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
): (input: A) => O;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
): (input: A) => P;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
): (input: A) => Q;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
): (input: A) => R;
export function flow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
  r: (input: R) => S,
): (input: A) => S;
export function flow<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
  r: (input: R) => S,
  s: (input: S) => T,
): (input: A) => T;
export function flow<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
>(
  a: (input: A) => B,
  b: (input: B) => C,
  c: (input: C) => D,
  d: (input: D) => E,
  e: (input: E) => F,
  f: (input: F) => G,
  g: (input: G) => H,
  h: (input: H) => I,
  i: (input: I) => J,
  j: (input: J) => K,
  k: (input: K) => L,
  l: (input: L) => M,
  m: (input: M) => N,
  n: (input: N) => O,
  o: (input: O) => P,
  p: (input: P) => Q,
  q: (input: Q) => R,
  r: (input: R) => S,
  s: (input: S) => T,
  t: (input: T) => U,
): (input: A) => U;
export function flow(
  ...fns: Array<(input: unknown) => unknown>
): (input: unknown) => unknown;
export function flow(
  ...fns: Array<(input: unknown) => unknown>
): (input: unknown) => unknown {
  return (value: unknown) => pipe(value, ...fns);
}

/** An awaitable value (a value that is either T or a promise for T) */
export type Awaitable<T> = T | Promise<T>;

/**
 * Applies sync or async functions over value from left to right.
 * @param value - The initial value to pipe
 * @param fns - The functions to pipe the value through
 * @returns a promise for final value after all functions have been applied
 */
export function pipeAsync<A>(value: A): Promise<A>;
export function pipeAsync<A, B>(
  value: A,
  a: (input: A) => Awaitable<B>,
): Promise<B>;
export function pipeAsync<A, B, C>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
): Promise<C>;
export function pipeAsync<A, B, C, D>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
): Promise<D>;
export function pipeAsync<A, B, C, D, E>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
): Promise<E>;
export function pipeAsync<A, B, C, D, E, F>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
): Promise<F>;
export function pipeAsync<A, B, C, D, E, F, G>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
): Promise<G>;
export function pipeAsync<A, B, C, D, E, F, G, H>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
): Promise<H>;
export function pipeAsync<A, B, C, D, E, F, G, H, I>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
): Promise<I>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
): Promise<J>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
): Promise<K>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
): Promise<L>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L, M>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
): Promise<M>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
): Promise<N>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
): Promise<O>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
): Promise<P>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
): Promise<Q>;
export function pipeAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
): Promise<R>;
export function pipeAsync<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
  r: (input: R) => Awaitable<S>,
): Promise<S>;
export function pipeAsync<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
  r: (input: R) => Awaitable<S>,
  s: (input: S) => Awaitable<T>,
): Promise<T>;
export function pipeAsync<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
>(
  value: A,
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
  r: (input: R) => Awaitable<S>,
  s: (input: S) => Awaitable<T>,
  t: (input: T) => Awaitable<U>,
): Promise<U>;
export async function pipeAsync(
  value: unknown,
  ...fns: Array<(input: unknown) => Awaitable<unknown>>
): Promise<unknown>;
export async function pipeAsync(
  value: unknown,
  ...fns: Array<(input: unknown) => Awaitable<unknown>>
): Promise<unknown> {
  for (const fn of fns) {
    value = await fn(value);
  }
  return value;
}

/**
 * Composes async or sync functions from left to right
 * @param fns - The functions to compose
 * @returns A function that applies the composed functions in left-to-right order
 */
export function flowAsync<A>(
  a: (input: A) => Awaitable<A>,
): (input: A) => Promise<A>;
export function flowAsync<A, B>(
  a: (input: A) => Awaitable<B>,
): (input: A) => Promise<B>;
export function flowAsync<A, B, C>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
): (input: A) => Promise<C>;
export function flowAsync<A, B, C, D>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
): (input: A) => Promise<D>;
export function flowAsync<A, B, C, D, E>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
): (input: A) => Promise<E>;
export function flowAsync<A, B, C, D, E, F>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
): (input: A) => Promise<F>;
export function flowAsync<A, B, C, D, E, F, G>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
): (input: A) => Promise<G>;
export function flowAsync<A, B, C, D, E, F, G, H>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
): (input: A) => Promise<H>;
export function flowAsync<A, B, C, D, E, F, G, H, I>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
): (input: A) => Promise<I>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
): (input: A) => Promise<J>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
): (input: A) => Promise<K>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
): (input: A) => Promise<L>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L, M>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
): (input: A) => Promise<M>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
): (input: A) => Promise<N>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
): (input: A) => Promise<O>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
): (input: A) => Promise<P>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
): (input: A) => Promise<Q>;
export function flowAsync<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
): (input: A) => Promise<R>;
export function flowAsync<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
  r: (input: R) => Awaitable<S>,
): (input: A) => Promise<S>;
export function flowAsync<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
  r: (input: R) => Awaitable<S>,
  s: (input: S) => Awaitable<T>,
): (input: A) => Promise<T>;
export function flowAsync<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
>(
  a: (input: A) => Awaitable<B>,
  b: (input: B) => Awaitable<C>,
  c: (input: C) => Awaitable<D>,
  d: (input: D) => Awaitable<E>,
  e: (input: E) => Awaitable<F>,
  f: (input: F) => Awaitable<G>,
  g: (input: G) => Awaitable<H>,
  h: (input: H) => Awaitable<I>,
  i: (input: I) => Awaitable<J>,
  j: (input: J) => Awaitable<K>,
  k: (input: K) => Awaitable<L>,
  l: (input: L) => Awaitable<M>,
  m: (input: M) => Awaitable<N>,
  n: (input: N) => Awaitable<O>,
  o: (input: O) => Awaitable<P>,
  p: (input: P) => Awaitable<Q>,
  q: (input: Q) => Awaitable<R>,
  r: (input: R) => Awaitable<S>,
  s: (input: S) => Awaitable<T>,
  t: (input: T) => Awaitable<U>,
): (input: A) => Promise<U>;
export function flowAsync(
  ...fns: Array<(input: unknown) => Awaitable<unknown>>
): (input: unknown) => Promise<unknown>;
export function flowAsync(
  ...fns: Array<(input: unknown) => Awaitable<unknown>>
): (input: unknown) => Promise<unknown> {
  return (value: unknown) => pipeAsync(value, ...fns);
}
